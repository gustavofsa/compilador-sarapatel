/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecsVarConst> copy = new ArrayList<PDecsVarConst>(node.getDecsVarConst());
            for(PDecsVarConst e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecsProcFunc> copy = new ArrayList<PDecsProcFunc>(node.getDecsProcFunc());
            for(PDecsProcFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        defaultIn(node);
    }

    public void outADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        inADecVarDecsVarConst(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarDecsVarConst(node);
    }

    public void inADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        defaultIn(node);
    }

    public void outADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        inADecConsDecsVarConst(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsDecsVarConst(node);
    }

    public void inADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        inADecProcedimentoDecsProcFunc(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoDecsProcFunc(node);
    }

    public void inADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        inADecFuncaoDecsProcFunc(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoDecsProcFunc(node);
    }

    public void inADecCons(ADecCons node)
    {
        defaultIn(node);
    }

    public void outADecCons(ADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        inADecCons(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecCons(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIds() != null)
        {
            node.getIds().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outADecVar(node);
    }

    public void inAIdIds(AIdIds node)
    {
        defaultIn(node);
    }

    public void outAIdIds(AIdIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIds(AIdIds node)
    {
        inAIdIds(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIds(node);
    }

    public void inAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        inAIdAtribuicaoIds(node);
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAIdAtribuicaoIds(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoArrTipo(ATipoArrTipo node)
    {
        defaultIn(node);
    }

    public void outATipoArrTipo(ATipoArrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoArrTipo(ATipoArrTipo node)
    {
        inATipoArrTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outATipoArrTipo(node);
    }

    public void inATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        inATipoInteiroTipoBase(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outATipoInteiroTipoBase(node);
    }

    public void inATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        inATipoBooleanoTipoBase(node);
        if(node.getTipoBooleano() != null)
        {
            node.getTipoBooleano().apply(this);
        }
        outATipoBooleanoTipoBase(node);
    }

    public void inATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipoBase(ATipoRealTipoBase node)
    {
        inATipoRealTipoBase(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outATipoRealTipoBase(node);
    }

    public void inATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        inATipoCadeiaTipoBase(node);
        if(node.getTipoCadeia() != null)
        {
            node.getTipoCadeia().apply(this);
        }
        outATipoCadeiaTipoBase(node);
    }

    public void inAIdAtribuicao(AIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicao(AIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicao(AIdAtribuicao node)
    {
        inAIdAtribuicao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIdAtribuicao(node);
    }

    public void inAArrayComp(AArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayComp(AArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        inAArrayComp(node);
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getIdExp() != null)
        {
            node.getIdExp().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outAArrayComp(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getProcedPrincipal() != null)
        {
            node.getProcedPrincipal().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getSeparadorParametroVazio() != null)
        {
            node.getSeparadorParametroVazio().apply(this);
        }
        outAParametros(node);
    }

    public void inAParametroSeparadorParametroSeparadorParametroVazio(AParametroSeparadorParametroSeparadorParametroVazio node)
    {
        defaultIn(node);
    }

    public void outAParametroSeparadorParametroSeparadorParametroVazio(AParametroSeparadorParametroSeparadorParametroVazio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroSeparadorParametroSeparadorParametroVazio(AParametroSeparadorParametroSeparadorParametroVazio node)
    {
        inAParametroSeparadorParametroSeparadorParametroVazio(node);
        if(node.getParametroSeparadorParametro() != null)
        {
            node.getParametroSeparadorParametro().apply(this);
        }
        outAParametroSeparadorParametroSeparadorParametroVazio(node);
    }

    public void inAVazioSeparadorParametroVazio(AVazioSeparadorParametroVazio node)
    {
        defaultIn(node);
    }

    public void outAVazioSeparadorParametroVazio(AVazioSeparadorParametroVazio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioSeparadorParametroVazio(AVazioSeparadorParametroVazio node)
    {
        inAVazioSeparadorParametroVazio(node);
        outAVazioSeparadorParametroVazio(node);
    }

    public void inAParametroSeparadorParametro(AParametroSeparadorParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroSeparadorParametro(AParametroSeparadorParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroSeparadorParametro(AParametroSeparadorParametro node)
    {
        inAParametroSeparadorParametro(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PSeparadorParametro> copy = new ArrayList<PSeparadorParametro>(node.getSeparadorParametro());
            for(PSeparadorParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAParametroSeparadorParametro(node);
    }

    public void inASeparadorParametro(ASeparadorParametro node)
    {
        defaultIn(node);
    }

    public void outASeparadorParametro(ASeparadorParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeparadorParametro(ASeparadorParametro node)
    {
        inASeparadorParametro(node);
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outASeparadorParametro(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametro(node);
    }

    public void inATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        inATipoBaseTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipoParametro(node);
    }

    public void inATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        inATipoParametroTipoParametro(node);
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outATipoParametroTipoParametro(node);
    }

    public void inAIdIdExp(AIdIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdIdExp(AIdIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdExp(AIdIdExp node)
    {
        inAIdIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdExp(node);
    }

    public void inAExpIdExp(AExpIdExp node)
    {
        defaultIn(node);
    }

    public void outAExpIdExp(AExpIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIdExp(AExpIdExp node)
    {
        inAExpIdExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpIdExp(node);
    }

    public void inAIdValor(AIdValor node)
    {
        defaultIn(node);
    }

    public void outAIdValor(AIdValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValor(AIdValor node)
    {
        inAIdValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValor(node);
    }

    public void inAValorValor(AValorValor node)
    {
        defaultIn(node);
    }

    public void outAValorValor(AValorValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorValor(AValorValor node)
    {
        inAValorValor(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outAValorValor(node);
    }

    public void inAChamadaFuncao(AChamadaFuncao node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncao(AChamadaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncao(AChamadaFuncao node)
    {
        inAChamadaFuncao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAChamadaFuncao(node);
    }

    public void inAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimento(AChamadaProcedimento node)
    {
        inAChamadaProcedimento(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAChamadaProcedimento(node);
    }

    public void inAExpIniListaExp(AExpIniListaExp node)
    {
        defaultIn(node);
    }

    public void outAExpIniListaExp(AExpIniListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIniListaExp(AExpIniListaExp node)
    {
        inAExpIniListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PSeparadorExp> copy = new ArrayList<PSeparadorExp>(node.getSeparadorExp());
            for(PSeparadorExp e : copy)
            {
                e.apply(this);
            }
        }
        outAExpIniListaExp(node);
    }

    public void inAVazioListaExp(AVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExp(AVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        inAVazioListaExp(node);
        outAVazioListaExp(node);
    }

    public void inASeparadorExp(ASeparadorExp node)
    {
        defaultIn(node);
    }

    public void outASeparadorExp(ASeparadorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeparadorExp(ASeparadorExp node)
    {
        inASeparadorExp(node);
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASeparadorExp(node);
    }

    public void inABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoes(ABlocoExpressoes node)
    {
        inABlocoExpressoes(node);
        if(node.getIniBloco() != null)
        {
            node.getIniBloco().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFimBloco() != null)
        {
            node.getFimBloco().apply(this);
        }
        outABlocoExpressoes(node);
    }

    public void inAFatorExp(AFatorExp node)
    {
        defaultIn(node);
    }

    public void outAFatorExp(AFatorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExp(AFatorExp node)
    {
        inAFatorExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExp(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAModFator(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inAExpTermo(AExpTermo node)
    {
        defaultIn(node);
    }

    public void outAExpTermo(AExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermo(AExpTermo node)
    {
        inAExpTermo(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAExpTermo(node);
    }
}
