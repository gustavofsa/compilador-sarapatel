/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.parser;

import lexer.*;
import node.*;
import sarapatel.analysis.Analysis;
import sarapatel.analysis.AnalysisAdapter;
import sarapatel.lexer.Lexer;
import sarapatel.lexer.LexerException;
import sarapatel.node.AArrayComp;
import sarapatel.node.ADecCons;
import sarapatel.node.ADecConsDecs;
import sarapatel.node.ADecVar;
import sarapatel.node.ADecVarDecs;
import sarapatel.node.ADivFator;
import sarapatel.node.AExpIdExp;
import sarapatel.node.AExpTermo;
import sarapatel.node.AFatorExp;
import sarapatel.node.AIdAtribuicao;
import sarapatel.node.AIdAtribuicaoIds;
import sarapatel.node.AIdIdExp;
import sarapatel.node.AIdIds;
import sarapatel.node.AMenosExp;
import sarapatel.node.AModFator;
import sarapatel.node.AMultFator;
import sarapatel.node.ANumeroTermo;
import sarapatel.node.AParametro;
import sarapatel.node.AParametroSeparadorParametro;
import sarapatel.node.AParametroSeparadorParametroSeparadorParametroVazio;
import sarapatel.node.AParametros;
import sarapatel.node.APrograma;
import sarapatel.node.ASeparadorParametro;
import sarapatel.node.ASomaExp;
import sarapatel.node.ATermoFator;
import sarapatel.node.ATipoBaseTipo;
import sarapatel.node.ATipoBaseTipoParametro;
import sarapatel.node.ATipoBooleanoTipoBase;
import sarapatel.node.ATipoCadeiaTipoBase;
import sarapatel.node.ATipoInteiroTipoBase;
import sarapatel.node.ATipoParametroTipoParametro;
import sarapatel.node.ATipoRealTipoBase;
import sarapatel.node.ATipoTipo;
import sarapatel.node.AVazioSeparadorParametroVazio;
import sarapatel.node.EOF;
import sarapatel.node.Node;
import sarapatel.node.PArrayComp;
import sarapatel.node.PDecCons;
import sarapatel.node.PDecVar;
import sarapatel.node.PDecs;
import sarapatel.node.PExp;
import sarapatel.node.PFator;
import sarapatel.node.PIdAtribuicao;
import sarapatel.node.PIdExp;
import sarapatel.node.PIds;
import sarapatel.node.PParametro;
import sarapatel.node.PParametroSeparadorParametro;
import sarapatel.node.PParametros;
import sarapatel.node.PPrograma;
import sarapatel.node.PSeparadorParametro;
import sarapatel.node.PSeparadorParametroVazio;
import sarapatel.node.PTermo;
import sarapatel.node.PTipo;
import sarapatel.node.PTipoBase;
import sarapatel.node.PTipoParametro;
import sarapatel.node.Start;
import sarapatel.node.Switchable;
import sarapatel.node.TAtribuicao;
import sarapatel.node.TColDir;
import sarapatel.node.TColEsq;
import sarapatel.node.TConst;
import sarapatel.node.TDiv;
import sarapatel.node.TDoisPontos;
import sarapatel.node.TId;
import sarapatel.node.TMenos;
import sarapatel.node.TMod;
import sarapatel.node.TMult;
import sarapatel.node.TNumero;
import sarapatel.node.TParDir;
import sarapatel.node.TParEsq;
import sarapatel.node.TPontoVirgula;
import sarapatel.node.TSeparador;
import sarapatel.node.TSoma;
import sarapatel.node.TTipoBooleano;
import sarapatel.node.TTipoCadeia;
import sarapatel.node.TTipoInteiro;
import sarapatel.node.TTipoReal;
import sarapatel.node.TVar;
import sarapatel.node.Token;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce ADecVarDecs */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ADecConsDecs */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ADecCons */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce ADecVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AIdIds */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AIdAtribuicaoIds */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ATipoTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ATipoInteiroTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ATipoBooleanoTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ATipoRealTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ATipoCadeiaTipoBase */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AIdAtribuicao */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AArrayComp */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AParametros */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AParametroSeparadorParametroSeparadorParametroVazio */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AVazioSeparadorParametroVazio */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AAparametroseparadorparametro1ParametroSeparadorParametro */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AAparametroseparadorparametro2ParametroSeparadorParametro */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce ASeparadorParametro */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AParametro */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce ATipoBaseTipoParametro */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list, false);
            }
            break;
            case 26: /* reduce ATipoParametroTipoParametro */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list, false);
            }
            break;
            case 27: /* reduce AIdIdExp */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce AExpIdExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AFatorExp */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list, false);
            }
            break;
            case 31: /* reduce AMenosExp */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list, false);
            }
            break;
            case 33: /* reduce AMultFator */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list, false);
            }
            break;
            case 34: /* reduce ADivFator */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list, false);
            }
            break;
            case 35: /* reduce AModFator */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list, false);
            }
            break;
            case 36: /* reduce ANumeroTermo */
            {
                ArrayList<Object> list = new36();
                push(goTo(18), list, false);
            }
            break;
            case 37: /* reduce AExpTermo */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list, false);
            }
            break;
            case 38: /* reduce ATerminal$Decs */
            {
                ArrayList<Object> list = new38();
                push(goTo(19), list, true);
            }
            break;
            case 39: /* reduce ANonTerminal$Decs */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list, true);
            }
            break;
            case 40: /* reduce ATerminal$Exp */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, true);
            }
            break;
            case 41: /* reduce ANonTerminal$Exp */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list, true);
            }
            break;
            case 42: /* reduce ATerminal$SeparadorParametro */
            {
                ArrayList<Object> list = new42();
                push(goTo(21), list, true);
            }
            break;
            case 43: /* reduce ANonTerminal$SeparadorParametro */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode2, listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode3, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new APrograma(listNode2, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecVarDecs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecs pdecsNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pdecsNode1 = new ADecVarDecs(pdecvarNode2);
        }
	nodeList.add(pdecsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecConsDecs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecs pdecsNode1;
        {
            // Block
        PDecCons pdecconsNode2;
        pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);

        pdecsNode1 = new ADecConsDecs(pdecconsNode2);
        }
	nodeList.add(pdecsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecCons pdecconsNode1;
        {
            // Block
        TConst tconstNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        PIdAtribuicao pidatribuicaoNode5;
        TPontoVirgula tpontovirgulaNode6;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode5 = (PIdAtribuicao)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pdecconsNode1 = new ADecCons(tconstNode2, tdoispontosNode3, ptipoNode4, pidatribuicaoNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdecconsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        TVar tvarNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        PIds pidsNode5;
        TPontoVirgula tpontovirgulaNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidsNode5 = (PIds)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pdecvarNode1 = new ADecVar(tvarNode2, tdoispontosNode3, ptipoNode4, pidsNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIds pidsNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidsNode1 = new AIdIds(tidNode2);
        }
	nodeList.add(pidsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdAtribuicaoIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIds pidsNode1;
        {
            // Block
        PIdAtribuicao pidatribuicaoNode2;
        pidatribuicaoNode2 = (PIdAtribuicao)nodeArrayList1.get(0);

        pidsNode1 = new AIdAtribuicaoIds(pidatribuicaoNode2);
        }
	nodeList.add(pidsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColEsq tcolesqNode3;
        PExp pexpNode4;
        TColDir tcoldirNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolesqNode3 = (TColEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcoldirNode5 = (TColDir)nodeArrayList4.get(0);

        ptipoNode1 = new ATipoTipo(ptipoNode2, tcolesqNode3, pexpNode4, tcoldirNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATipoInteiroTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoInteiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipoInteiro)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoInteiroTipoBase(ttipointeiroNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATipoBooleanoTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoBooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipoBooleano)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoBooleanoTipoBase(ttipobooleanoNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATipoRealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoReal ttiporealNode2;
        ttiporealNode2 = (TTipoReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoRealTipoBase(ttiporealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipoCadeiaTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoCadeia ttipocadeiaNode2;
        ttipocadeiaNode2 = (TTipoCadeia)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoCadeiaTipoBase(ttipocadeiaNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAtribuicao pidatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        TAtribuicao tatribuicaoNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pidatribuicaoNode1 = new AIdAtribuicao(tidNode2, tatribuicaoNode3, pexpNode4);
        }
	nodeList.add(pidatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TColEsq tcolesqNode2;
        PIdExp pidexpNode3;
        TColDir tcoldirNode4;
        tcolesqNode2 = (TColEsq)nodeArrayList1.get(0);
        pidexpNode3 = (PIdExp)nodeArrayList2.get(0);
        tcoldirNode4 = (TColDir)nodeArrayList3.get(0);

        parraycompNode1 = new AArrayComp(tcolesqNode2, pidexpNode3, tcoldirNode4);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PSeparadorParametroVazio pseparadorparametrovazioNode2;
        pseparadorparametrovazioNode2 = (PSeparadorParametroVazio)nodeArrayList1.get(0);

        pparametrosNode1 = new AParametros(pseparadorparametrovazioNode2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AParametroSeparadorParametroSeparadorParametroVazio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeparadorParametroVazio pseparadorparametrovazioNode1;
        {
            // Block
        PParametroSeparadorParametro pparametroseparadorparametroNode2;
        pparametroseparadorparametroNode2 = (PParametroSeparadorParametro)nodeArrayList1.get(0);

        pseparadorparametrovazioNode1 = new AParametroSeparadorParametroSeparadorParametroVazio(pparametroseparadorparametroNode2);
        }
	nodeList.add(pseparadorparametrovazioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVazioSeparadorParametroVazio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSeparadorParametroVazio pseparadorparametrovazioNode1;
        {
            // Block

        pseparadorparametrovazioNode1 = new AVazioSeparadorParametroVazio();
        }
	nodeList.add(pseparadorparametrovazioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAparametroseparadorparametro1ParametroSeparadorParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroSeparadorParametro pparametroseparadorparametroNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametroseparadorparametroNode1 = new AParametroSeparadorParametro(pparametroNode2, listNode3);
        }
	nodeList.add(pparametroseparadorparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAparametroseparadorparametro2ParametroSeparadorParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametroSeparadorParametro pparametroseparadorparametroNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametroseparadorparametroNode1 = new AParametroSeparadorParametro(pparametroNode2, listNode4);
        }
	nodeList.add(pparametroseparadorparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASeparadorParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeparadorParametro pseparadorparametroNode1;
        {
            // Block
        TSeparador tseparadorNode2;
        PParametro pparametroNode3;
        tseparadorNode2 = (TSeparador)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pseparadorparametroNode1 = new ASeparadorParametro(tseparadorNode2, pparametroNode3);
        }
	nodeList.add(pseparadorparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TId tidNode3;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametro(ptipoparametroNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATipoBaseTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoparametroNode1 = new ATipoBaseTipoParametro(ptipobaseNode2);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ATipoParametroTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TColEsq tcolesqNode3;
        TColDir tcoldirNode4;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tcolesqNode3 = (TColEsq)nodeArrayList2.get(0);
        tcoldirNode4 = (TColDir)nodeArrayList3.get(0);

        ptipoparametroNode1 = new ATipoParametroTipoParametro(ptipoparametroNode2, tcolesqNode3, tcoldirNode4);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdIdExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdExp pidexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidexpNode1 = new AIdIdExp(tidNode2);
        }
	nodeList.add(pidexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExpIdExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdExp pidexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pidexpNode1 = new AExpIdExp(pexpNode2);
        }
	nodeList.add(pidexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        pexpNode1 = new AFatorExp(pfatorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TSoma tsomaNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsomaNode3 = (TSoma)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, tsomaNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMenosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenos tmenosNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, tmenosNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pfatorNode1 = new ATermoFator(ptermoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMult tmultNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AMultFator(pfatorNode2, tmultNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TDiv tdivNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new ADivFator(pfatorNode2, tdivNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AModFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMod tmodNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AModFator(pfatorNode2, tmodNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANumeroTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        ptermoNode1 = new ANumeroTermo(tnumeroNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TParEsq tparesqNode2;
        PExp pexpNode3;
        TParDir tpardirNode4;
        tparesqNode2 = (TParEsq)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpardirNode4 = (TParDir)nodeArrayList3.get(0);

        ptermoNode1 = new AExpTermo(tparesqNode2, pexpNode3, tpardirNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATerminal$Decs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecs pdecsNode1;
        pdecsNode1 = (PDecs)nodeArrayList1.get(0);
	if(pdecsNode1 != null)
	{
	  listNode2.add(pdecsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANonTerminal$Decs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecs pdecsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecsNode2 = (PDecs)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecsNode2 != null)
	{
	  listNode3.add(pdecsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANonTerminal$Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ATerminal$SeparadorParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSeparadorParametro pseparadorparametroNode1;
        pseparadorparametroNode1 = (PSeparadorParametro)nodeArrayList1.get(0);
	if(pseparadorparametroNode1 != null)
	{
	  listNode2.add(pseparadorparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ANonTerminal$SeparadorParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSeparadorParametro pseparadorparametroNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pseparadorparametroNode2 = (PSeparadorParametro)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pseparadorparametroNode2 != null)
	{
	  listNode3.add(pseparadorparametroNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {5, SHIFT, 2}, {22, SHIFT, 3}, {23, SHIFT, 4}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 2}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 3}, {19, SHIFT, 15}, },
			{{-1, ERROR, 4}, {19, SHIFT, 16}, },
			{{-1, ERROR, 5}, {40, ACCEPT, -1}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 40}, {7, SHIFT, 17}, {8, SHIFT, 18}, },
			{{-1, REDUCE, 29}, {9, SHIFT, 19}, {10, SHIFT, 20}, {11, SHIFT, 21}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {5, SHIFT, 2}, {22, SHIFT, 3}, {23, SHIFT, 4}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 14}, {6, SHIFT, 25}, {7, SHIFT, 17}, {8, SHIFT, 18}, },
			{{-1, ERROR, 15}, {24, SHIFT, 26}, {25, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, ERROR, 16}, {24, SHIFT, 26}, {25, SHIFT, 27}, {26, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, ERROR, 17}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 18}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 19}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 20}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, ERROR, 21}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, REDUCE, 41}, {7, SHIFT, 17}, {8, SHIFT, 18}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 30}, {3, SHIFT, 38}, {38, SHIFT, 39}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 32}, {3, SHIFT, 38}, {38, SHIFT, 42}, },
			{{-1, REDUCE, 30}, {9, SHIFT, 19}, {10, SHIFT, 20}, {11, SHIFT, 21}, },
			{{-1, REDUCE, 31}, {9, SHIFT, 19}, {10, SHIFT, 20}, {11, SHIFT, 21}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 38}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, REDUCE, 8}, {20, SHIFT, 45}, },
			{{-1, ERROR, 40}, {2, SHIFT, 46}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 42}, {20, SHIFT, 45}, },
			{{-1, ERROR, 43}, {2, SHIFT, 47}, },
			{{-1, ERROR, 44}, {4, SHIFT, 48}, {7, SHIFT, 17}, {8, SHIFT, 18}, },
			{{-1, ERROR, 45}, {0, SHIFT, 1}, {5, SHIFT, 2}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 16}, {7, SHIFT, 17}, {8, SHIFT, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 6}, {12, 22}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 40}, },
			{{-1, 30}, {16, 32}, },
			{{-1, 31}, },
			{{-1, 41}, {32, 43}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 9}, {2, 14}, {13, 24}, {23, 24}, {38, 44}, {45, 49}, },
			{{-1, 10}, {17, 33}, {18, 34}, },
			{{-1, 11}, {19, 35}, {20, 36}, {21, 37}, },
			{{-1, 12}, },
			{{-1, 13}, {12, 23}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: numero, '(', 'var', 'const', EOF",
			"expecting: numero, ';', ']', '(', ')', '+', '-', '*', '/', '%', EOF",
			"expecting: numero, '('",
			"expecting: ':'",
			"expecting: EOF",
			"expecting: numero, '(', '+', '-', EOF",
			"expecting: numero, '(', EOF",
			"expecting: ')', '+', '-'",
			"expecting: 'inteiro', 'real', 'booleano', 'cadeia'",
			"expecting: '[', id",
			"expecting: ';', '<<'",
			"expecting: ';'",
			"expecting: '<<'",
			"expecting: ']', '+', '-'",
			"expecting: ';', '+', '-'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 0, 0, 0, 5, 1, 1, 0, 6, 7, 8, 8, 2, 2, 2, 2, 2, 0, 6, 5, 1, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 2, 10, 11, 11, 12, 11, 13, 2, 0, 0, 9, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
