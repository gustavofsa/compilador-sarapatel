/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecsProcFunc> copy = new ArrayList<PDecsProcFunc>(node.getDecsProcFunc());
            Collections.reverse(copy);
            for(PDecsProcFunc e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecsVarConst> copy = new ArrayList<PDecsVarConst>(node.getDecsVarConst());
            Collections.reverse(copy);
            for(PDecsVarConst e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        defaultIn(node);
    }

    public void outADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecsVarConst(ADecVarDecsVarConst node)
    {
        inADecVarDecsVarConst(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarDecsVarConst(node);
    }

    public void inADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        defaultIn(node);
    }

    public void outADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecsVarConst(ADecConsDecsVarConst node)
    {
        inADecConsDecsVarConst(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsDecsVarConst(node);
    }

    public void inADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDecsProcFunc(ADecProcedimentoDecsProcFunc node)
    {
        inADecProcedimentoDecsProcFunc(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoDecsProcFunc(node);
    }

    public void inADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecsProcFunc(ADecFuncaoDecsProcFunc node)
    {
        inADecFuncaoDecsProcFunc(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoDecsProcFunc(node);
    }

    public void inADecCons(ADecCons node)
    {
        defaultIn(node);
    }

    public void outADecCons(ADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        inADecCons(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outADecCons(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getIds() != null)
        {
            node.getIds().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecVar(node);
    }

    public void inAIdIds(AIdIds node)
    {
        defaultIn(node);
    }

    public void outAIdIds(AIdIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIds(AIdIds node)
    {
        inAIdIds(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIds(node);
    }

    public void inAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoIds(AIdAtribuicaoIds node)
    {
        inAIdAtribuicaoIds(node);
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAIdAtribuicaoIds(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoArrTipo(ATipoArrTipo node)
    {
        defaultIn(node);
    }

    public void outATipoArrTipo(ATipoArrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoArrTipo(ATipoArrTipo node)
    {
        inATipoArrTipo(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoArrTipo(node);
    }

    public void inATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        inATipoInteiroTipoBase(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outATipoInteiroTipoBase(node);
    }

    public void inATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        inATipoBooleanoTipoBase(node);
        if(node.getTipoBooleano() != null)
        {
            node.getTipoBooleano().apply(this);
        }
        outATipoBooleanoTipoBase(node);
    }

    public void inATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipoBase(ATipoRealTipoBase node)
    {
        inATipoRealTipoBase(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outATipoRealTipoBase(node);
    }

    public void inATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        inATipoCadeiaTipoBase(node);
        if(node.getTipoCadeia() != null)
        {
            node.getTipoCadeia().apply(this);
        }
        outATipoCadeiaTipoBase(node);
    }

    public void inAIdAtribuicao(AIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicao(AIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicao(AIdAtribuicao node)
    {
        inAIdAtribuicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtribuicao(node);
    }

    public void inAArrayComp(AArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayComp(AArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        inAArrayComp(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        outAArrayComp(node);
    }

    public void inABlocoComandos(ABlocoComandos node)
    {
        defaultIn(node);
    }

    public void outABlocoComandos(ABlocoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandos(ABlocoComandos node)
    {
        inABlocoComandos(node);
        if(node.getFimBloco() != null)
        {
            node.getFimBloco().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecsVarConst> copy = new ArrayList<PDecsVarConst>(node.getDecsVarConst());
            Collections.reverse(copy);
            for(PDecsVarConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIniBloco() != null)
        {
            node.getIniBloco().apply(this);
        }
        outABlocoComandos(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getProcedPrincipal() != null)
        {
            node.getProcedPrincipal().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAParametroSeparadorParametroParametros(AParametroSeparadorParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroSeparadorParametroParametros(AParametroSeparadorParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroSeparadorParametroParametros(AParametroSeparadorParametroParametros node)
    {
        inAParametroSeparadorParametroParametros(node);
        {
            List<PSeparadorParametro> copy = new ArrayList<PSeparadorParametro>(node.getSeparadorParametro());
            Collections.reverse(copy);
            for(PSeparadorParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroSeparadorParametroParametros(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inASeparadorParametro(ASeparadorParametro node)
    {
        defaultIn(node);
    }

    public void outASeparadorParametro(ASeparadorParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeparadorParametro(ASeparadorParametro node)
    {
        inASeparadorParametro(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        outASeparadorParametro(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outAParametro(node);
    }

    public void inATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        inATipoBaseTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipoParametro(node);
    }

    public void inATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        inATipoParametroTipoParametro(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outATipoParametroTipoParametro(node);
    }

    public void inAIdIdExp(AIdIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdIdExp(AIdIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdExp(AIdIdExp node)
    {
        inAIdIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdExp(node);
    }

    public void inAExpIdExp(AExpIdExp node)
    {
        defaultIn(node);
    }

    public void outAExpIdExp(AExpIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIdExp(AExpIdExp node)
    {
        inAExpIdExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpIdExp(node);
    }

    public void inAIdValor(AIdValor node)
    {
        defaultIn(node);
    }

    public void outAIdValor(AIdValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValor(AIdValor node)
    {
        inAIdValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValor(node);
    }

    public void inAValorValor(AValorValor node)
    {
        defaultIn(node);
    }

    public void outAValorValor(AValorValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorValor(AValorValor node)
    {
        inAValorValor(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorValor(node);
    }

    public void inAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimento(AChamadaProcedimento node)
    {
        inAChamadaProcedimento(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaProcedimento(node);
    }

    public void inABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoes(ABlocoExpressoes node)
    {
        inABlocoExpressoes(node);
        if(node.getFimBloco() != null)
        {
            node.getFimBloco().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIniBloco() != null)
        {
            node.getIniBloco().apply(this);
        }
        outABlocoExpressoes(node);
    }

    public void inADeclaracaoAbertaComando(ADeclaracaoAbertaComando node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoAbertaComando(ADeclaracaoAbertaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoAbertaComando(ADeclaracaoAbertaComando node)
    {
        inADeclaracaoAbertaComando(node);
        if(node.getDeclAberta() != null)
        {
            node.getDeclAberta().apply(this);
        }
        outADeclaracaoAbertaComando(node);
    }

    public void inADeclaracaoFechadaComando(ADeclaracaoFechadaComando node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoFechadaComando(ADeclaracaoFechadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoFechadaComando(ADeclaracaoFechadaComando node)
    {
        inADeclaracaoFechadaComando(node);
        if(node.getDeclFechada() != null)
        {
            node.getDeclFechada().apply(this);
        }
        outADeclaracaoFechadaComando(node);
    }

    public void inACondSeDeclAberta(ACondSeDeclAberta node)
    {
        defaultIn(node);
    }

    public void outACondSeDeclAberta(ACondSeDeclAberta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondSeDeclAberta(ACondSeDeclAberta node)
    {
        inACondSeDeclAberta(node);
        if(node.getTudoMenosSe() != null)
        {
            node.getTudoMenosSe().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondSeDeclAberta(node);
    }

    public void inACondSeAbertaDeclAberta(ACondSeAbertaDeclAberta node)
    {
        defaultIn(node);
    }

    public void outACondSeAbertaDeclAberta(ACondSeAbertaDeclAberta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondSeAbertaDeclAberta(ACondSeAbertaDeclAberta node)
    {
        inACondSeAbertaDeclAberta(node);
        if(node.getDeclAberta() != null)
        {
            node.getDeclAberta().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondSeAbertaDeclAberta(node);
    }

    public void inACondSeSenaoAbertaDeclAberta(ACondSeSenaoAbertaDeclAberta node)
    {
        defaultIn(node);
    }

    public void outACondSeSenaoAbertaDeclAberta(ACondSeSenaoAbertaDeclAberta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondSeSenaoAbertaDeclAberta(ACondSeSenaoAbertaDeclAberta node)
    {
        inACondSeSenaoAbertaDeclAberta(node);
        if(node.getDeclAberta() != null)
        {
            node.getDeclAberta().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDeclFechada() != null)
        {
            node.getDeclFechada().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondSeSenaoAbertaDeclAberta(node);
    }

    public void inAEnquantoAbertoDeclAberta(AEnquantoAbertoDeclAberta node)
    {
        defaultIn(node);
    }

    public void outAEnquantoAbertoDeclAberta(AEnquantoAbertoDeclAberta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoAbertoDeclAberta(AEnquantoAbertoDeclAberta node)
    {
        inAEnquantoAbertoDeclAberta(node);
        if(node.getDeclAberta() != null)
        {
            node.getDeclAberta().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoAbertoDeclAberta(node);
    }

    public void inATudoMenosSeDeclFechada(ATudoMenosSeDeclFechada node)
    {
        defaultIn(node);
    }

    public void outATudoMenosSeDeclFechada(ATudoMenosSeDeclFechada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATudoMenosSeDeclFechada(ATudoMenosSeDeclFechada node)
    {
        inATudoMenosSeDeclFechada(node);
        if(node.getTudoMenosSe() != null)
        {
            node.getTudoMenosSe().apply(this);
        }
        outATudoMenosSeDeclFechada(node);
    }

    public void inACondSeSenaoFechadaDeclFechada(ACondSeSenaoFechadaDeclFechada node)
    {
        defaultIn(node);
    }

    public void outACondSeSenaoFechadaDeclFechada(ACondSeSenaoFechadaDeclFechada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondSeSenaoFechadaDeclFechada(ACondSeSenaoFechadaDeclFechada node)
    {
        inACondSeSenaoFechadaDeclFechada(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondSeSenaoFechadaDeclFechada(node);
    }

    public void inAEnquantoFechadoDeclFechada(AEnquantoFechadoDeclFechada node)
    {
        defaultIn(node);
    }

    public void outAEnquantoFechadoDeclFechada(AEnquantoFechadoDeclFechada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoFechadoDeclFechada(AEnquantoFechadoDeclFechada node)
    {
        inAEnquantoFechadoDeclFechada(node);
        if(node.getDeclFechada() != null)
        {
            node.getDeclFechada().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoFechadoDeclFechada(node);
    }

    public void inAOutra1TudoMenosSe(AOutra1TudoMenosSe node)
    {
        defaultIn(node);
    }

    public void outAOutra1TudoMenosSe(AOutra1TudoMenosSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutra1TudoMenosSe(AOutra1TudoMenosSe node)
    {
        inAOutra1TudoMenosSe(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAOutra1TudoMenosSe(node);
    }

    public void inAOutra2TudoMenosSe(AOutra2TudoMenosSe node)
    {
        defaultIn(node);
    }

    public void outAOutra2TudoMenosSe(AOutra2TudoMenosSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutra2TudoMenosSe(AOutra2TudoMenosSe node)
    {
        inAOutra2TudoMenosSe(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        outAOutra2TudoMenosSe(node);
    }

    public void inAOutra3TudoMenosSe(AOutra3TudoMenosSe node)
    {
        defaultIn(node);
    }

    public void outAOutra3TudoMenosSe(AOutra3TudoMenosSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutra3TudoMenosSe(AOutra3TudoMenosSe node)
    {
        inAOutra3TudoMenosSe(node);
        if(node.getBlocoComandos() != null)
        {
            node.getBlocoComandos().apply(this);
        }
        outAOutra3TudoMenosSe(node);
    }

    public void inAArrayCompExp(AArrayCompExp node)
    {
        defaultIn(node);
    }

    public void outAArrayCompExp(AArrayCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompExp(AArrayCompExp node)
    {
        inAArrayCompExp(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayCompExp(node);
    }

    public void inATernarioExp(ATernarioExp node)
    {
        defaultIn(node);
    }

    public void outATernarioExp(ATernarioExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernarioExp(ATernarioExp node)
    {
        inATernarioExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outATernarioExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAndExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp(AMaiorIgualExp node)
    {
        inAMaiorIgualExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorIgualExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        if(node.getMaiorQ() != null)
        {
            node.getMaiorQ().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inAExpSomaSubExp(AExpSomaSubExp node)
    {
        defaultIn(node);
    }

    public void outAExpSomaSubExp(AExpSomaSubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaSubExp(AExpSomaSubExp node)
    {
        inAExpSomaSubExp(node);
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        outAExpSomaSubExp(node);
    }

    public void inAFatorExpSomaSub(AFatorExpSomaSub node)
    {
        defaultIn(node);
    }

    public void outAFatorExpSomaSub(AFatorExpSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExpSomaSub(AFatorExpSomaSub node)
    {
        inAFatorExpSomaSub(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExpSomaSub(node);
    }

    public void inASomaExpSomaSub(ASomaExpSomaSub node)
    {
        defaultIn(node);
    }

    public void outASomaExpSomaSub(ASomaExpSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpSomaSub(ASomaExpSomaSub node)
    {
        inASomaExpSomaSub(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        outASomaExpSomaSub(node);
    }

    public void inAMenosExpSomaSub(AMenosExpSomaSub node)
    {
        defaultIn(node);
    }

    public void outAMenosExpSomaSub(AMenosExpSomaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpSomaSub(AMenosExpSomaSub node)
    {
        inAMenosExpSomaSub(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpSomaSub() != null)
        {
            node.getExpSomaSub().apply(this);
        }
        outAMenosExpSomaSub(node);
    }

    public void inATermoFator(ATermoFator node)
    {
        defaultIn(node);
    }

    public void outATermoFator(ATermoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoFator(ATermoFator node)
    {
        inATermoFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAModFator(node);
    }

    public void inAValorTermo(AValorTermo node)
    {
        defaultIn(node);
    }

    public void outAValorTermo(AValorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorTermo(AValorTermo node)
    {
        inAValorTermo(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorTermo(node);
    }

    public void inAChamadaFuncaoTermo(AChamadaFuncaoTermo node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoTermo(AChamadaFuncaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoTermo(AChamadaFuncaoTermo node)
    {
        inAChamadaFuncaoTermo(node);
        if(node.getChamadaFuncao() != null)
        {
            node.getChamadaFuncao().apply(this);
        }
        outAChamadaFuncaoTermo(node);
    }

    public void inAExpTermo(AExpTermo node)
    {
        defaultIn(node);
    }

    public void outAExpTermo(AExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTermo(AExpTermo node)
    {
        inAExpTermo(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAExpTermo(node);
    }

    public void inABlocoExpTermo(ABlocoExpTermo node)
    {
        defaultIn(node);
    }

    public void outABlocoExpTermo(ABlocoExpTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpTermo(ABlocoExpTermo node)
    {
        inABlocoExpTermo(node);
        if(node.getBlocoExpressoes() != null)
        {
            node.getBlocoExpressoes().apply(this);
        }
        outABlocoExpTermo(node);
    }

    public void inAMenosTermoTermo(AMenosTermoTermo node)
    {
        defaultIn(node);
    }

    public void outAMenosTermoTermo(AMenosTermoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosTermoTermo(AMenosTermoTermo node)
    {
        inAMenosTermoTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outAMenosTermoTermo(node);
    }

    public void inATipagemTermo(ATipagemTermo node)
    {
        defaultIn(node);
    }

    public void outATipagemTermo(ATipagemTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipagemTermo(ATipagemTermo node)
    {
        inATipagemTermo(node);
        if(node.getTipagem() != null)
        {
            node.getTipagem().apply(this);
        }
        outATipagemTermo(node);
    }

    public void inAIntTipagem(AIntTipagem node)
    {
        defaultIn(node);
    }

    public void outAIntTipagem(AIntTipagem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipagem(AIntTipagem node)
    {
        inAIntTipagem(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAIntTipagem(node);
    }

    public void inARealTipagem(ARealTipagem node)
    {
        defaultIn(node);
    }

    public void outARealTipagem(ARealTipagem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipagem(ARealTipagem node)
    {
        inARealTipagem(node);
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        outARealTipagem(node);
    }

    public void inAStringTipagem(AStringTipagem node)
    {
        defaultIn(node);
    }

    public void outAStringTipagem(AStringTipagem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipagem(AStringTipagem node)
    {
        inAStringTipagem(node);
        if(node.getCadeia() != null)
        {
            node.getCadeia().apply(this);
        }
        outAStringTipagem(node);
    }

    public void inABoolTipagem(ABoolTipagem node)
    {
        defaultIn(node);
    }

    public void outABoolTipagem(ABoolTipagem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipagem(ABoolTipagem node)
    {
        inABoolTipagem(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABoolTipagem(node);
    }

    public void inAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        inAChamadaFuncaoChamadaFuncao(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaFuncaoChamadaFuncao(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getListaExpVazia() != null)
        {
            node.getListaExpVazia().apply(this);
        }
        outAListaExpListaExp(node);
    }

    public void inAListaExpVaziaListaExpVazia(AListaExpVaziaListaExpVazia node)
    {
        defaultIn(node);
    }

    public void outAListaExpVaziaListaExpVazia(AListaExpVaziaListaExpVazia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpVaziaListaExpVazia(AListaExpVaziaListaExpVazia node)
    {
        inAListaExpVaziaListaExpVazia(node);
        {
            List<PSeparadorExp> copy = new ArrayList<PSeparadorExp>(node.getSeparadorExp());
            Collections.reverse(copy);
            for(PSeparadorExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExpVaziaListaExpVazia(node);
    }

    public void inASeparadorExpSeparadorExp(ASeparadorExpSeparadorExp node)
    {
        defaultIn(node);
    }

    public void outASeparadorExpSeparadorExp(ASeparadorExpSeparadorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeparadorExpSeparadorExp(ASeparadorExpSeparadorExp node)
    {
        inASeparadorExpSeparadorExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        outASeparadorExpSeparadorExp(node);
    }
}
